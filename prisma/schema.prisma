generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Shop {
  id              String               @id @default(cuid())
  shopifyDomain   String               @unique
  accessToken     String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  language        String               @default("fr")
  fiscalConfig    FiscalConfiguration?
  generalSettings GeneralSettings?
  reports         Report[]
  scheduledTasks  ScheduledTask[]      @relation("ShopToScheduledTask")
  tasks           Task[]               @relation("ShopToTask")
  ftpConfig       FtpConfig?
  trialStartDate    DateTime? @map("trial_start_date")
  trialEndDate      DateTime? @map("trial_end_date")
  subscriptionStatus SubscriptionStatus @default(TRIAL) @map("subscription_status")
}

model FiscalConfiguration {
  id                 String        @id @default(cuid())
  shopId             String        @unique
  companyName        String?
  country            String?
  currency           String
  vatRate            Float?
  defaultFormat      ExportFormat?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  code               String
  countries          String[]
  description        String
  encoding           String
  fileFormat         String
  name               String
  notes              String
  separator          String
  salesAccount       String        @default("701")
  compatibleSoftware String[]
  exportFormats      String[]
  requiredColumns    String[]
  taxRates           Json
  shop               Shop          @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}

model Report {
  id                String             @id @default(cuid())
  shopId            String
  startDate         DateTime?
  endDate           DateTime?
  filePath          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  errorMessage      String?
  fileSize          Int
  type              String
  format            ExportFormat
  status            ReportStatus
  fileName          String
  dataType          String
  deliveryMethod    String             @default("EMAIL")
  ftpDeliveryStatus FtpDeliveryStatus?
  shop              Shop               @relation(fields: [shopId], references: [id])
  scheduledTasks    ScheduledTask[]    @relation("ReportToScheduledTask")
  tasks             Task[]             @relation("ReportToTask")

  @@index([shopId])
}

model ScheduledTask {
  id            String    @id @default(cuid())
  reportId      String
  shopId        String
  frequency     String
  executionDay  Int
  executionTime String
  emailConfig   String
  lastRun       DateTime?
  nextRun       DateTime
  status        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  report        Report    @relation("ReportToScheduledTask", fields: [reportId], references: [id])
  shop          Shop      @relation("ShopToScheduledTask", fields: [shopId], references: [id])
  tasks         Task[]    @relation("ScheduledTaskToTask")

  @@index([shopId])
  @@index([reportId])
}

model Task {
  id              String        @id @default(cuid())
  scheduledTaskId String
  shopId          String
  reportId        String
  status          String
  scheduledFor    DateTime
  startedAt       DateTime?
  completedAt     DateTime?
  emailConfig     String
  errorMessage    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  report          Report        @relation("ReportToTask", fields: [reportId], references: [id])
  scheduledTask   ScheduledTask @relation("ScheduledTaskToTask", fields: [scheduledTaskId], references: [id])
  shop            Shop          @relation("ShopToTask", fields: [shopId], references: [id])

  @@index([scheduledTaskId])
  @@index([shopId])
  @@index([reportId])
}

model GeneralSettings {
  id           String   @id @default(cuid())
  shopId       String   @unique
  timezone     String   @default("UTC")
  language     String   @default("fr")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  salesAccount String   @default("701")
  
  // Invoice customization fields
  invoiceLogoUrl     String?
  invoiceLogoWidth   Int     @default(150)
  invoiceLogoHeight  Int     @default(100)
  invoiceCompanyName String?
  invoiceAddress     String?
  invoicePhone       String?
  invoiceEmail       String?
  
  shop         Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}

model FtpConfig {
  id          String   @id @default(cuid())
  shopId      String   @unique
  host        String
  port        Int      @default(21)
  protocol    Protocol @default(SFTP)
  username    String
  password    String
  directory   String   @default("/")
  passiveMode Boolean  @default(false)
  retryDelay  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
  @@map("ftp_configs")
}

enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  ERROR
  COMPLETED_WITH_EMPTY_DATA
}

enum Protocol {
  FTP
  SFTP
}

enum FtpDeliveryStatus {
  PENDING
  SUCCESS
  FAILED
}

enum UserRole {
  ADMIN
  USER
  ACCOUNTANT
}

enum ExportFormat {
  CSV
  JSON
  PDF
  XML
  TXT
  XLSX
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  EXPIRED
  CANCELLED
}
